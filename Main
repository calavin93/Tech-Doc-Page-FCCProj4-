<style>
html,
body {
  min-width: 290px;
  color: #4d4e53;
  background-color: #ffffff;
  font-family: 'Open Sans', Arial, sans-serif;
  line-height: 1.5;
}

#navbar {
  position: fixed;
  min-width: 290px;
  top: 0px;
  left: 0px;
  width: 300px;
  height: 100%;
  border-right: solid;
  border-color: rgba(0, 22, 22, 0.4);
}

header {
  color: black;
  margin: 10px;
  text-align: center;
  font-size: 1.8em;
  font-weight: thin;
}

#main-doc header {
  text-align: left;
  margin: 0px;
}

#navbar ul {
  height: 88%;
  padding: 0;
  overflow-y: auto;
  overflow-x: hidden;
}

#navbar li {
  color: #4d4e53;
  border-top: 1px solid;
  list-style: none;
  position: relative;
  width: 100%;
}

#navbar a {
  display: block;
  padding: 10px 30px;
  color: #4d4e53;
  text-decoration: none;
  cursor: pointer;
}

#main-doc {
  position: absolute;
  margin-left: 310px;
  padding: 20px;
  margin-bottom: 110px;
}

section article {
  color: #4d4e53;
  margin: 15px;
  font-size: 0.96em;
}

section li {
  margin: 15px 0px 0px 20px;
}

code {
  display: block;
  text-align: left;
  white-space: pre-line;
  position: relative;
  word-break: normal;
  word-wrap: normal;
  line-height: 2;
  background-color: #f7f7f7;
  padding: 15px;
  margin: 10px;
  border-radius: 5px;
}

@media only screen and (max-width: 815px) {
  /* For mobile phones: */
  #navbar ul {
    border: 1px solid;
    height: 207px;
  }

  #navbar {
    background-color: white;
    position: absolute;
    top: 0;
    padding: 0;
    margin: 0;
    width: 100%;
    max-height: 275px;
    border: none;
    z-index: 1;
    border-bottom: 2px solid;
  }

  #main-doc {
    position: relative;
    margin-left: 0px;
    margin-top: 270px;
  }
}

@media only screen and (max-width: 400px) {
  #main-doc {
    margin-left: -10px;
  }

  code {
    margin-left: -20px;
    width: 100%;
    padding: 15px;
    padding-left: 10px;
    padding-right: 45px;
    min-width: 233px;
  }
}
</style>


<html>

<head>
  <meta charset="UTF-8">
  <title>Technical Documentation Page</title>
  <!--
	  <link rel="stylesheet" type="text/css" href="styles.css" />
-->
</head>

<body>

  <nav id="navbar">
    <header>JS Documentation</header>

    <ul>
      <li><a href="#introduction" class="nav-link">Introduction</a></li>
      <li><a href="#what_you_should_already_know" class="nav-link">What You Should Already Know</a></li>
      <li><a href="#javascript_and_java" class="nav-link">JavaScript and Java</a></li>
      <li><a href="#hello_world" class="nav-link">Hello World</a></li>
      <li><a href="#variables" class="nav-link">Variables</a></li>
      <li><a href="#declaring_variables" class="nav-link">Declaring Variables</a></li>
      <li><a href="#variable_scope" class="nav-link">Variable Scope</a></li>
      <li><a href="#global_variables" class="nav-link">Global Variables</a></li>
      <li><a href="#constants" class="nav-link">Constants</a></li>
      <li><a href="#datatypes" class="nav-link">Data Types</a></li>
      <li><a href="#if_else" class="nav-link">If...else Statement</a></li>
      <li><a href="#while" class="nav-link">While Statement</a></li>
      <li><a href="#function_declarations" class="nav-link">Function Declarations</a></li>
      <li><a href="#reference" class="nav-link">References</a></li>
    </ul>
  </nav>

  <main id="main-doc">
    <section class="main-section" id="introduction">
      <header>Introduction</header>
      <article>
        <p>JavaScript is a cross-platform, object-oriented scripting language. It is a small and lightweight language. Inside a host environment (for example, a web browser), JavaScript can be connected to the objects of its environment to provide programmatic control over them.</p>

        <p>JavaScript contains a standard library of objects, such as Array, Date, and Math, and a core set of language elements such as operators, control structures, and statements. Core JavaScript can be extended for a variety of purposes by supplementing it with additional objects; for example:</p>

        <ul>
          <li>Client-side JavaScript extends the core language by supplying objects to control a browser and its Document Object Model (DOM). For example, client-side extensions allow an application to place elements on an HTML form and respond to user events such as mouse clicks, form input, and page navigation.</li>
          <li>Server-side JavaScript extends the core language by supplying objects relevant to running JavaScript on a server. For example, server-side extensions allow an application to communicate with a database, provide continuity of information from one invocation to another of the application, or perform file manipulations on a server.</li>
        </ul>
      </article>
    </section>

    <section class="main-section" id="what_you_should_already_know">
      <header>What you should already know</header>
      <article>

        <p>This guide assumes you have the following basic background:</p>

        <ul>
          <li>A general understanding of the Internet and the World Wide Web (WWW).</li>
          <li>Good working knowledge of HyperText Markup Language (HTML).</li>
          <li>Some programming experience. If you are new to programming, try one of the tutorials linked on the main page about JavaScript.</li>
        </ul>

      </article>
    </section>

    <section class="main-section" id="javascript_and_java">
      <header>JavaScript and Java</header>
      <article>
        <p>JavaScript and Java are similar in some ways but fundamentally different in some others. The JavaScript language resembles Java but does not have Java's static typing and strong type checking. JavaScript follows most Java expression syntax, naming conventions and basic control-flow constructs which was the reason why it was renamed from LiveScript to JavaScript.</p>

        <p>In contrast to Java's compile-time system of classes built by declarations, JavaScript supports a runtime system based on a small number of data types representing numeric, Boolean, and string values. JavaScript has a prototype-based object model instead of the more common class-based object model. The prototype-based model provides dynamic inheritance; that is, what is inherited can vary for individual objects. JavaScript also supports functions without any special declarative requirements. Functions can be properties of objects, executing as loosely typed methods.</p>

        <p>JavaScript is a very free-form language compared to Java. You do not have to declare all variables, classes, and methods. You do not have to be concerned with whether methods are public, private, or protected, and you do not have to implement interfaces. Variables, parameters, and function return types are not explicitly typed.</p>

      </article>
    </section>

    <section class="main-section" id="hello_world">
      <header>Hello world</header>
      <article>
        To get started with writing JavaScript, open the Scratchpad and write your
        first "Hello world" JavaScript code:
        <code>function greetMe(yourName) { alert("Hello " + yourName); }
          greetMe("World");
        </code>

        Select the code in the pad and hit Ctrl+R to watch it unfold in your
        browser!
      </article>
    </section>

    <section class="main-section" id="variables">
      <header>Variables</header>
      <article>
        <p>You use variables as symbolic names for values in your application. The names of variables, called identifiers, conform to certain rules.</p>

        <p>A JavaScript identifier must start with a letter, underscore (_), or dollar sign ($); subsequent characters can also be digits (0-9). Because JavaScript is case sensitive, letters include the characters "A" through "Z" (uppercase) and the characters "a" through "z" (lowercase).</p>

        <p>You can use ISO 8859-1 or Unicode letters such as å and ü in identifiers. You can also use the Unicode escape sequences as characters in identifiers. Some examples of legal names are Number_hits, temp99, and _name.</p>

      </article>
    </section>

    <section class="main-section" id="declaring_variables">
      <header>Declaring Variables</header>
      <article>
        <p>You can declare a variable in three ways:</p>

        <p>With the keyword var. For example,</p>

        <code>var x = 42.
        </code>
        <p>This syntax can be used to declare both local and global variables.</p>

        <p>By simply assigning it a value. For example,</p>

        <code>x = 42.
        </code>
        <p>This always declares a global variable. It generates a strict JavaScript warning. You shouldn't use this variant.</p>

        <p>With the keyword let. For example,</p>

        <code>let y = 13.
        </code>
        
         <p>This syntax can be used to declare a block scope local variable. See Variable scope below.</p>
      </article>
    </section>

     <section class="main-section" id="data_types">
    <header>Data types</header>
    <article>
      <p>The latest ECMAScript standard defines seven data types:</p>
      <ul>
        <li>
          <p>Six data types that are primitives:</p>
          <ul>
            <li>Boolean. true and false.</li>
            <li>
              null. A special keyword denoting a null value. Because JavaScript
              is case-sensitive, null is not the same as Null, NULL, or any
              other variant.
            </li>
            <li>undefined. A top-level property whose value is undefined.</li>
            <li>Number. 42 or 3.14159.</li>
            <li>String. "Howdy"</li>
            <li>
              Symbol (new in ECMAScript 2015). A data type whose instances are
              unique and immutable.
            </li>
          </ul>
        </li>

        <li>and Object</li>
      </ul>
      Although these data types are a relatively small amount, they enable you
      to perform useful functions with your applications. Objects and functions
      are the other fundamental elements in the language. You can think of
      objects as named containers for values, and functions as procedures that
      your application can perform.
    </article>
  </section>
    
</body>

</html>
